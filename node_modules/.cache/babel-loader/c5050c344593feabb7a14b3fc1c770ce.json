{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\Graduation Essay\\\\KidsDrawing\\\\client\\\\KidsDrawing\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\nconst defaultDatasetIdKey = 'label';\n\nfunction reforwardRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}\n\nfunction setOptions(chart, nextOptions) {\n  chart.options = { ...nextOptions\n  };\n}\n\nfunction setLabels(currentData, nextLabels) {\n  currentData.labels = nextLabels;\n}\n\nfunction setDatasets(currentData, nextDatasets) {\n  let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n  const addedDatasets = [];\n  currentData.datasets = nextDatasets.map(nextDataset => {\n    // given the new set, find it's current match\n    const currentDataset = currentData.datasets.find(dataset => dataset[datasetIdKey] === nextDataset[datasetIdKey]); // There is no original to update, so simply add new one\n\n    if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n      return { ...nextDataset\n      };\n    }\n\n    addedDatasets.push(currentDataset);\n    Object.assign(currentDataset, nextDataset);\n    return currentDataset;\n  });\n}\n\nfunction cloneData(data) {\n  let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n  const nextData = {\n    labels: [],\n    datasets: []\n  };\n  setLabels(nextData, data.labels);\n  setDatasets(nextData, data.datasets, datasetIdKey);\n  return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getDatasetAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n    intersect: true\n  }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n    intersect: true\n  }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */\n\n\nfunction getElementsAtEvent(chart, event) {\n  return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n    intersect: true\n  }, false);\n}\n\nfunction ChartComponent(param, ref) {\n  let _param$height = param.height,\n      height = _param$height === void 0 ? 150 : _param$height,\n      _param$width = param.width,\n      width = _param$width === void 0 ? 300 : _param$width,\n      _param$redraw = param.redraw,\n      redraw = _param$redraw === void 0 ? false : _param$redraw,\n      datasetIdKey = param.datasetIdKey,\n      type = param.type,\n      data = param.data,\n      options = param.options,\n      _param$plugins = param.plugins,\n      plugins = _param$plugins === void 0 ? [] : _param$plugins,\n      fallbackContent = param.fallbackContent,\n      updateMode = param.updateMode,\n      props = _objectWithoutProperties(param, [\"height\", \"width\", \"redraw\", \"datasetIdKey\", \"type\", \"data\", \"options\", \"plugins\", \"fallbackContent\", \"updateMode\"]);\n\n  const canvasRef = useRef(null);\n  const chartRef = useRef();\n\n  const renderChart = () => {\n    if (!canvasRef.current) return;\n    chartRef.current = new Chart$1(canvasRef.current, {\n      type,\n      data: cloneData(data, datasetIdKey),\n      options,\n      plugins\n    });\n    reforwardRef(ref, chartRef.current);\n  };\n\n  const destroyChart = () => {\n    reforwardRef(ref, null);\n\n    if (chartRef.current) {\n      chartRef.current.destroy();\n      chartRef.current = null;\n    }\n  };\n\n  useEffect(() => {\n    if (!redraw && chartRef.current && options) {\n      setOptions(chartRef.current, options);\n    }\n  }, [redraw, options]);\n  useEffect(() => {\n    if (!redraw && chartRef.current) {\n      setLabels(chartRef.current.config.data, data.labels);\n    }\n  }, [redraw, data.labels]);\n  useEffect(() => {\n    if (!redraw && chartRef.current && data.datasets) {\n      setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n    }\n  }, [redraw, data.datasets]);\n  useEffect(() => {\n    if (!chartRef.current) return;\n\n    if (redraw) {\n      destroyChart();\n      setTimeout(renderChart);\n    } else {\n      chartRef.current.update(updateMode);\n    }\n  }, [redraw, options, data.labels, data.datasets, updateMode]);\n  useEffect(() => {\n    renderChart();\n    return () => destroyChart();\n  }, []);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"canvas\", Object.assign({\n      ref: canvasRef,\n      role: \"img\",\n      height: height,\n      width: width\n    }, props), fallbackContent)\n  );\n}\n\nconst Chart =\n/*#__PURE__*/\nforwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n  Chart$1.register(registerables);\n  return (\n    /*#__PURE__*/\n    forwardRef((props, ref) =>\n    /*#__PURE__*/\n    React.createElement(Chart, Object.assign({}, props, {\n      ref: ref,\n      type: type\n    })))\n  );\n}\n\nconst Line =\n/* #__PURE__ */\ncreateTypedChart('line', LineController);\nconst Bar =\n/* #__PURE__ */\ncreateTypedChart('bar', BarController);\nconst Radar =\n/* #__PURE__ */\ncreateTypedChart('radar', RadarController);\nconst Doughnut =\n/* #__PURE__ */\ncreateTypedChart('doughnut', DoughnutController);\nconst PolarArea =\n/* #__PURE__ */\ncreateTypedChart('polarArea', PolarAreaController);\nconst Bubble =\n/* #__PURE__ */\ncreateTypedChart('bubble', BubbleController);\nconst Pie =\n/* #__PURE__ */\ncreateTypedChart('pie', PieController);\nconst Scatter =\n/* #__PURE__ */\ncreateTypedChart('scatter', ScatterController);\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };","map":null,"metadata":{},"sourceType":"module"}