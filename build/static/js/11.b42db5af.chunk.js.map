{"version":3,"sources":["common/components/TextInput.tsx","components/Account/RegisterForm.tsx","common/service/Aut/Register.tsx"],"names":["TextInput","props","useState","touched","setTouch","error","setError","htmlClass","setHtmlClass","setValue","htmlFor","id","toString","label","value","type","onChange","event","target","validClass","elementValue","required","maxLength","length","field","className","inputClass","placeholder","RegisterForm","dispatch","useDispatch","history","useHistory","username","password","email","firstName","lastName","dateOfBirth","profile_image_url","sex","phone","address","parent_id","roleName","formState","setFormState","changeRouteHome","push","hasFormValueChanged","model","isFormInvalid","onClick","src","alt","onSubmit","e","preventDefault","toast","loading","position","POSITION","TOP_CENTER","data","fetch","process","method","headers","body","JSON","stringify","then","response","ok","Error","statusText","update","render","isLoading","autoClose","setTimeout","catch","closeButton","postRegister","style","color"],"mappings":"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","file":"static/js/11.b42db5af.chunk.js","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { TextInputProps } from \"../types/TextInput.types\";\n\nfunction TextInput(props: TextInputProps): JSX.Element {\n    const [touched, setTouch] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [htmlClass, setHtmlClass] = useState(\"\");\n    const [, setValue] = useState(\"\");\n\n\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.value];\n\n        [error, validClass] = (!elementValue && props.required) ?\n            [\"Value cannot be empty\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n        if (!error) {\n            [error, validClass] = (props.maxLength && elementValue && elementValue.length > (props.maxLength)) ?\n            [`Value can't have more than ${props.maxLength} characters`, \"is-invalid\"] : [\"\", \"is-valid\"];\n        }\n\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\n\n        setTouch(true);\n        setError(error);\n        setHtmlClass(validClass);\n        setValue(elementValue);\n    }\n\n    return (\n        <div>\n            <label htmlFor={props.id.toString()}>{props.label}</label>\n            <input\n                value={props.value}\n                type={props.type}\n                onChange={onValueChanged}\n                className={`form-control ${props.inputClass} ${htmlClass}`}\n                id={`id_${props.label}`}\n                placeholder={props.placeholder} />\n            {error ?\n                <div className=\"invalid-feedback\">\n                    {error}\n                </div> : null\n            }\n        </div>\n    );\n}\n\nexport default TextInput;","import React, { useState, FormEvent, Dispatch } from \"react\";\r\nimport { OnChangeModel } from \"../../common/types/Form.types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport TextInput from \"../../common/components/TextInput\";\r\nimport '../../assets/css/Login.css'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { postRegister } from \"../../common/service/Aut/Register\";\r\n\r\nconst RegisterForm: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [formState, setFormState] = useState({\r\n    username: { error: \"\", value: \"\" },\r\n    password: { error: \"\", value: \"\" },\r\n    email: { error: \"\", value: \"\" },\r\n    firstName: { error: \"\", value: \"\" },\r\n    lastName: { error: \"\", value: \"\" },\r\n    dateOfBirth: { error: \"\", value: \"\" },\r\n    profile_image_url: { error: \"\", value: \"\" },\r\n    sex: { error: \"\", value: \"\" },\r\n    phone: { error: \"\", value: \"\" },\r\n    address: { error: \"\", value: \"\" },\r\n    parent_id: { error: \"\", value: \"\" },\r\n    roleName: { error: \"\", value: \"\" },\r\n  });\r\n\r\n  function changeRouteHome(value: boolean) {\r\n    if (value === true){\r\n      history.push('/aut')\r\n    }\r\n  }\r\n\r\n  function routeLogin() {\r\n      history.push('/aut')\r\n  }\r\n\r\n  function hasFormValueChanged(model: OnChangeModel): void {\r\n    setFormState({ ...formState, [model.field]: { error: model.error, value: model.value } });\r\n  }\r\n\r\n  function submit(e: FormEvent<HTMLFormElement>): void {\r\n    e.preventDefault();\r\n    if(isFormInvalid()) { return; }\r\n    const id = toast.loading(\"Đang xác thực. Vui lòng đợi giây lát...\", {\r\n      position: toast.POSITION.TOP_CENTER\r\n    });\r\n    dispatch(postRegister({\r\n        username: formState.username.value,\r\n        password: formState.password.value,\r\n        email: formState.email.value,\r\n        firstName: null,\r\n        lastName: null,\r\n        dateOfBirth: null,\r\n        profile_image_url: null,\r\n        sex: null,\r\n        phone: null,\r\n        address: null,\r\n        roleName: \"PARENT\"\r\n    }, changeRouteHome, id))\r\n  }\r\n\r\n  function isFormInvalid() {\r\n    return (formState.username.error || formState.password.error\r\n      || !formState.username.value || !formState.password.value);\r\n  }\r\n\r\n  function getDisabledClass(): string {\r\n    let isError: boolean = isFormInvalid() as boolean;\r\n    return isError ? \"disabled\" : \"\";\r\n  }\r\n\r\n  const changeRoute = () => {\r\n    history.push('/landing-page')\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"container-fluid \" id=\"login-page\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-xl-10 col-lg-10 col-md-9\">\r\n          <h2 id=\"text-logo\" onClick={changeRoute}>KidsDrawing</h2>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n          <div className=\"card o-hidden border-0  my-5\">\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 d-none d-lg-block text-center\" id=\"image-login-page\">\r\n                  <img src=\"https://res.cloudinary.com/djtmwajiu/image/upload/v1667290306/o0ymcs4lblpy2hfmisyq.png\" alt=\"First slide\" />\r\n                </div>\r\n                <div className=\"col-lg-6 shadow-lg\">\r\n                  <div className=\"p-5\">\r\n                    <div className=\"text-center\">\r\n                      <h1 className=\"h4 text-gray-900 mb-4\">Đăng ký</h1>\r\n                    </div>\r\n                    <form className=\"user\" onSubmit={submit}>\r\n                      <div className=\"form-group\">\r\n\r\n                        <TextInput id=\"input_username\"\r\n                          field=\"username\"\r\n                          value={formState.username.value}\r\n                          onChange={hasFormValueChanged}\r\n                          required={true}\r\n                          maxLength={100}\r\n                          label=\"Tên đăng nhập\"\r\n                          placeholder=\"\" />\r\n                      </div>\r\n                      \r\n                      <div className=\"form-group\">\r\n\r\n                        <TextInput id=\"input_email\"\r\n                          field=\"email\"\r\n                          value={formState.email.value}\r\n                          onChange={hasFormValueChanged}\r\n                          required={true}\r\n                          maxLength={100}\r\n                          label=\"Email\"\r\n                          placeholder=\"\" />\r\n                      </div>\r\n\r\n                      <div className=\"form-group\">\r\n                        <TextInput id=\"input_password\"\r\n                          field=\"password\"\r\n                          value={formState.password.value}\r\n                          onChange={hasFormValueChanged}\r\n                          required={true}\r\n                          maxLength={100}\r\n                          type=\"password\"\r\n                          label=\"Mật khẩu\"\r\n                          placeholder=\"\" />\r\n                      </div>\r\n                \r\n                      <button\r\n                        className={`btn btn-primary btn-user btn-block ${getDisabledClass()}`}\r\n                        type=\"submit\">\r\n                        Đăng kí\r\n                      </button>\r\n                    </form>\r\n                    <div className=\"justify-content-center text-center\">\r\n                      <p>Bạn đã có tài khoản? <span style={{color: '#0066FF'}}><span className=\"link\" style={{color: '#0066FF'}} onClick={() => {routeLogin()}}>Đăng nhập</span></span></p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import { toast } from 'react-toastify';\r\n\r\nexport function postRegister(data: any, changeRouteHome: any, id: any) {\r\n    \r\n    return (dispatch: any) => {\r\n        fetch(\r\n            `${process.env.REACT_APP_API_URL}/user`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Origin': `${process.env.REACT_APP_API_LOCAL}`,\r\n                'Access-Control-Allow-Credentials': 'true'\r\n            },\r\n            body: JSON.stringify(data)\r\n        }\r\n        )\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error(response.statusText);\r\n                }\r\n                return response\r\n            })\r\n            .then(data => {\r\n\r\n                toast.update(id, { render: \"Đăng ký thành công\", type: \"success\", isLoading: false, position: toast.POSITION.TOP_CENTER, autoClose: 1000 });\r\n                setTimeout(function () {\r\n                    changeRouteHome(true);\r\n                }, 1000);            \r\n            })\r\n            .catch(error => {\r\n                toast.update(id, { render: \"Đăng ký không thành công\", type: \"error\", isLoading: false, position: toast.POSITION.TOP_CENTER, closeButton: true });\r\n            });\r\n    };\r\n}"],"sourceRoot":""}