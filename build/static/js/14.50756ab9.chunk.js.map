{"version":3,"sources":["components/Student/StudentList.js","components/Student/Student.tsx"],"names":["StudentList","props","dispatch","useDispatch","datas","useSelector","state","users","students","history","useHistory","routeChange","teacher","localStorage","removeItem","setItem","id","toString","push","pathname","class_id","options","paginationSize","pageStartIndex","firstPageText","prePageText","nextPageText","lastPageText","nextPageTitle","prePageTitle","firstPageTitle","lastPageTitle","showTotal","totalSize","length","onSizePerPageChange","sizePerPage","page","console","log","onPageChange","columns","dataField","text","filter","textFilter","style","width","formatter","cell","row","className","type","onClick","onSelect","setModificationState","UserModificationStatus","Remove","pagination","paginationFactory","paginationProps","paginationTableProps","hover","keyField","data","filterFactory","Student","path","root","numberItemsCount","useState","popup","setPopup","promiseInProgress","usePromiseTracker","access_token","getItem","refresh_token","useEffect","undefined","access_token_decode","jwt_decode","refresh_token_decode","exp_access_token_decode","exp","exp_refresh_token_decode","now_time","Date","now","logout","trackPromise","getStudent","clearSelectedUser","updateCurrentPath","area","TopCard","title","icon","class","user","changeSelectedUser","None","selectedUser","modificationState","open","onClose","closeOnDocumentClick","idx","toast","loading","position","POSITION","TOP_CENTER","deleteUser","addNotification","username"],"mappings":"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","file":"static/js/14.50756ab9.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setModificationState } from \"../../store/actions/users.action\";\r\nimport { UserModificationStatus } from \"../../store/models/user.interface\";\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory, { PaginationProvider } from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {MdAnalytics} from 'react-icons/md'\r\nimport { FaEdit } from 'react-icons/fa'\r\nimport { IoIosRemove } from 'react-icons/io'\r\n\r\n\r\nfunction StudentList(props) {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const users = useSelector((state) => state.users);\r\n\r\n  const datas = users.students;\r\n\r\n  const history = useHistory();\r\n  const routeChange = (teacher) => {\r\n    let path = '/student/detail';\r\n    localStorage.removeItem(\"student_id\");\r\n    localStorage.setItem(\"student_id\", teacher.id.toString())\r\n    history.push({\r\n      pathname: path,\r\n      state: { class_id: teacher.id }\r\n    });\r\n  }\r\n\r\n  const options = {\r\n    paginationSize: 5,\r\n    pageStartIndex: 1,\r\n    firstPageText: 'First',\r\n    prePageText: 'Back',\r\n    nextPageText: 'Next',\r\n    lastPageText: 'Last',\r\n    nextPageTitle: 'First page',\r\n    prePageTitle: 'Pre page',\r\n    firstPageTitle: 'Next page',\r\n    lastPageTitle: 'Last page',\r\n    showTotal: true,\r\n    totalSize: datas.length,\r\n    onSizePerPageChange: (sizePerPage, page) => {\r\n      console.log('Size per page change!!!');\r\n      console.log('Newest size per page:' + sizePerPage);\r\n      console.log('Newest page:' + page);\r\n    },\r\n    onPageChange: (page, sizePerPage) => {\r\n      console.log('Page change!!!');\r\n      console.log('Newest size per page:' + sizePerPage);\r\n      console.log('Newest page:' + page);\r\n    }\r\n  };\r\n\r\n\r\n  function editButton(cell, row) {\r\n    return (\r\n      <div className=\"row mt-2\">\r\n        <div className=\"col-md-5 ml-2\">\r\n        <button type=\"button\" className=\"btn btn-info\" onClick={() => {\r\n        routeChange(row)\r\n      }}><MdAnalytics className=\"icon-remove\"/></button>\r\n        </div>\r\n        <div className=\"col-md-5\"> \r\n        <button type=\"button\" className=\"btn btn-danger\" onClick={() => {\r\n        if (props.onSelect) props.onSelect(row);\r\n        dispatch(setModificationState(UserModificationStatus.Remove))\r\n      }}><IoIosRemove className=\"icon-remove\"/></button>\r\n        </div>\r\n      </div>\r\n        \r\n    )\r\n  }\r\n\r\n\r\n  const columns = [\r\n    {\r\n      dataField: 'username',\r\n      text: 'Tên đăng nhập',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: 'email',\r\n      text: 'Email',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: 'firstName',\r\n      text: 'Họ',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: 'lastName',\r\n      text: 'Tên',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: 'dateOfBirth',\r\n      text: 'Ngày sinh',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: 'sex',\r\n      text: 'Giới tính',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: 'phone',\r\n      text: 'Số điện thoại',\r\n      filter: textFilter()\r\n    },\r\n    {\r\n      dataField: '',\r\n      text: '',\r\n      style:{\r\n        width: '120px'\r\n      },\r\n      formatter: editButton\r\n    }\r\n  ];\r\n\r\n  const contentTable = ({ paginationProps, paginationTableProps }) => (\r\n    <div>\r\n      {/* <PaginationListStandalone {...paginationProps} /> */}\r\n      <div>\r\n        <div>\r\n          <BootstrapTable\r\n            hover\r\n            keyField=\"id\"\r\n            data={datas}\r\n            columns={columns}\r\n            filter={filterFactory()}\r\n            {...paginationTableProps}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n\r\n\r\n/*   const userElements = users.students.filter((val) => {\r\n    if (props.value === \"\") {\r\n      return val;\r\n    }\r\n    else if (typeof props.value !== 'undefined' && (toNonAccentVietnamese(val.username).toLowerCase().includes(props.value.toLowerCase()) || val.username.toLowerCase().includes(props.value.toLowerCase()))) {\r\n      return val;\r\n    }\r\n    return null\r\n  }).map((student, index) => {\r\n    if (!student) { return null; }\r\n    return (<tr className={`table-row ${(users.selectedUser && users.selectedUser.id === student.id) ? \"selected\" : \"\"}`}\r\n\r\n      key={`user_${index}`}>\r\n      <th scope=\"row\">{index + 1}</th>\r\n      <td onClick={() => {\r\n        if (props.onSelect) props.onSelect(student);\r\n        routeChange()\r\n      }}\r\n      >\r\n        {student.firstName} {student.lastName}\r\n      </td>\r\n      <td>{student.username}</td>\r\n      {\r\n        function () {\r\n          if (student.status !== \"\" && student.status !== null) {\r\n            return (\r\n              <td style={{ color: \"#18AB56\" }}>Đang hoạt động</td>\r\n            )\r\n          }\r\n          else {\r\n            return (\r\n              <td style={{ color: \"#2F4F4F\" }}>Không hoạt động</td>\r\n            )\r\n          }\r\n        }()\r\n      }\r\n      <td>\r\n        <button type=\"button\" className=\"btn btn-danger\" onClick={() => {\r\n          if (props.onSelect) props.onSelect(student);\r\n          dispatch(setModificationState(UserModificationStatus.Remove))\r\n        }}>Xóa</button>\r\n      </td>\r\n    </tr>);\r\n  }); */\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <div>\r\n        <PaginationProvider\r\n          pagination={\r\n            paginationFactory(options)\r\n          }\r\n        >\r\n          {contentTable}\r\n        </PaginationProvider>\r\n      </div >\r\n    </Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default StudentList;\r\n","import React, { Fragment, Dispatch, useState, useEffect } from \"react\";\r\nimport StudentList from \"./StudentList\";\r\nimport TopCard from \"../../common/components/TopCard\";\r\nimport \"./Student.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateCurrentPath } from \"../../store/actions/root.actions\";\r\nimport { IUserState, IStateType, IRootPageStateType } from \"../../store/models/root.interface\";\r\nimport Popup from \"reactjs-popup\";\r\nimport { addNotification } from \"../../store/actions/notifications.action\";\r\nimport {clearSelectedUser, setModificationState, changeSelectedUser, removeStudent  } from \"../../store/actions/users.action\";\r\nimport { IUser, UserModificationStatus } from \"../../store/models/user.interface\";\r\nimport { deleteUser } from \"../../common/service/User/DeleteUser\";\r\nimport { getStudent } from \"../../common/service/Student/GetStudent\";\r\nimport { logout } from \"../../store/actions/account.actions\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { trackPromise, usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loading from \"../../common/components/Loading\";\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\n\r\nconst Student: React.FC = () => {\r\n    const dispatch: Dispatch<any> = useDispatch();\r\n    const users: IUserState = useSelector((state: IStateType) => state.users);\r\n    const path: IRootPageStateType = useSelector((state: IStateType) => state.root.page);\r\n    const numberItemsCount: number = users.students.length;\r\n    const [popup, setPopup] = useState(false);\r\n    const { promiseInProgress } = usePromiseTracker();\r\n\r\n    let access_token = localStorage.getItem(\"access_token\");\r\n    let refresh_token = localStorage.getItem(\"refresh_token\");\r\n\r\n    useEffect(() => {\r\n        if (access_token !== null && refresh_token !== null && access_token !== undefined && refresh_token !== undefined){\r\n            let access_token_decode: any = jwt_decode(access_token)\r\n            let refresh_token_decode: any = jwt_decode(refresh_token)\r\n            let exp_access_token_decode = access_token_decode.exp;\r\n            let exp_refresh_token_decode = refresh_token_decode.exp;\r\n            let now_time = Date.now() / 1000;\r\n            console.log(exp_access_token_decode)\r\n            console.log(now_time)\r\n            if (exp_access_token_decode < now_time){\r\n                if (exp_refresh_token_decode < now_time){\r\n                    localStorage.removeItem('access_token') // Authorization\r\n                    localStorage.removeItem('refresh_token')\r\n                    localStorage.removeItem('username')\r\n                    localStorage.removeItem('role')\r\n                    localStorage.removeItem('id')\r\n                    localStorage.removeItem('contest_id')\r\n                    localStorage.removeItem('schedule_id')\r\n                    dispatch(logout())\r\n                }\r\n                else {\r\n                    trackPromise(getStudent(dispatch))\r\n                    console.log(\"hello\")\r\n                }\r\n            }\r\n            else {\r\n                trackPromise(getStudent(dispatch))\r\n                console.log(\"hello 1\")\r\n            }\r\n        }\r\n        \r\n    }, [dispatch, access_token, refresh_token]);\r\n\r\n    useEffect(() => {\r\n        dispatch(clearSelectedUser());\r\n        dispatch(updateCurrentPath(\"Học sinh\", \"Danh sách\"));\r\n    }, [path.area, dispatch])\r\n\r\n    function onUserSelect(user: IUser): void {\r\n        dispatch(changeSelectedUser(user));\r\n        onUserRemove();\r\n        dispatch(setModificationState(UserModificationStatus.None));\r\n    }\r\n\r\n    function onUserRemove() {\r\n        setPopup(true);\r\n    }\r\n\r\n    return (\r\n        promiseInProgress ?\r\n      <div className=\"loader\"></div> :<Fragment>\r\n            <h1 className=\"h3 mb-2 text-gray-800\">Học sinh</h1>\r\n            <p className=\"mb-4\">Thông tin chung</p>\r\n            <div className=\"row\">\r\n                <TopCard title=\"HỌC SINH\" text={`${numberItemsCount}`} icon=\"user\" class=\"primary\" />\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-12 col-lg-12\">\r\n                    <div className=\"card shadow mb-4\">\r\n                        <div className=\"card-header py-3\">\r\n                            <h6 className=\"m-0 font-weight-bold text-green\">Danh sách học sinh</h6>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            <StudentList\r\n                                onSelect={onUserSelect}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                function () {\r\n                    if ((users.selectedUser) && (users.modificationState === UserModificationStatus.Remove)) {\r\n                        return (\r\n                            <Popup\r\n                                open={popup}\r\n                                onClose={() => setPopup(false)}\r\n                                closeOnDocumentClick\r\n                            >\r\n                                <div className=\"popup-modal\" id=\"popup-modal\">\r\n                                    <div className=\"popup-title\">\r\n                                        Bạn có chắc chắn muốn xóa?\r\n                                    </div>\r\n                                    <div className=\"popup-content\">\r\n                                        <button type=\"button\"\r\n                                            className=\"btn btn-danger\"\r\n                                            onClick={() => {\r\n                                                if (!users.selectedUser) {\r\n                                                    return;\r\n                                                }\r\n                                                const idx = toast.loading(\"Đang xác thực. Vui lòng đợi giây lát...\", {\r\n                                                    position: toast.POSITION.TOP_CENTER\r\n                                                });\r\n                                                deleteUser(dispatch, users.selectedUser.id,idx)\r\n                                                dispatch(addNotification(\"Phụ huynh\", `${users.selectedUser.username} đã được xóa!`));\r\n                                                dispatch(clearSelectedUser());\r\n                                                setPopup(false);\r\n                                            }}>Remove\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                            </Popup>\r\n                        )\r\n                    }\r\n                }()\r\n            }\r\n        </Fragment >\r\n    );\r\n};\r\n\r\nexport default Student;\r\n"],"sourceRoot":""}