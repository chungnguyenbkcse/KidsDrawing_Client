{"version":3,"sources":["common/service/Aut/RefreshToken.tsx","common/components/TextInput.tsx","common/service/User/UpdateStatusUser.tsx","components/Account/ForgotPassword.tsx","common/service/ResetPassword/PostResetPassword.tsx"],"names":["postRefreshToken","refresh_token","localStorage","getItem","dispatch","fetch","process","method","headers","body","JSON","stringify","then","response","ok","status","Error","statusText","id","putStatusUser","removeItem","logout","json","data","setItem","accessToken","refreshToken","catch","error","console","log","TextInput","props","useState","touched","setTouch","setError","htmlClass","setHtmlClass","setValue","htmlFor","toString","label","value","type","onChange","event","target","validClass","elementValue","required","maxLength","length","field","className","inputClass","placeholder","bearer","fetchDataRequest","val","fetchDataSuccess","fetchDataError","ForgotPassword","useDispatch","history","useHistory","username","password","formState","setFormState","isFormInvalid","onClick","push","src","alt","onSubmit","e","preventDefault","idx","toast","loading","position","POSITION","TOP_CENTER","postResetPassword","email","token","update","render","isLoading","autoClose","closeButton","model"],"mappings":"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","file":"static/js/7.896700c2.chunk.js","sourcesContent":["import { logout } from \"../../../store/actions/account.actions\";\r\nimport { putStatusUser } from \"../User/UpdateStatusUser\";\r\n\r\nexport function postRefreshToken() {\r\n    var refresh_token = localStorage.getItem(\"refresh_token\");\r\n\r\n    return (dispatch: any) => {\r\n        fetch(\r\n                `${process.env.REACT_APP_API_URL}/auth/refresh`, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        \"refreshToken\":refresh_token\r\n                    })\r\n                }\r\n            )\r\n            .then( response => {\r\n                if (!response.ok) {\r\n                    if (response.status === 500){\r\n                        let id = localStorage.getItem('id');\r\n                        dispatch(putStatusUser(id, {\r\n                            status: null\r\n                          }))\r\n                        localStorage.removeItem('access_token') // Authorization\r\n                        localStorage.removeItem('refresh_token')\r\n                        localStorage.removeItem('username')\r\n                        localStorage.removeItem('role')\r\n                        localStorage.removeItem('id')\r\n                        localStorage.removeItem('contest_id')\r\n                        localStorage.removeItem('schedule_id')\r\n                        dispatch(logout())\r\n                    }\r\n                    else {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                }\r\n                return response.json()\r\n            })\r\n            .then (data => {\r\n                localStorage.removeItem('access_token') // Authorization\r\n                localStorage.removeItem('refresh_token')\r\n                localStorage.setItem('access_token', data.accessToken) // Authorization\r\n                localStorage.setItem('refresh_token', data.refreshToken)\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error\")\r\n            });\r\n    };\r\n}","import React, { useState, ChangeEvent } from \"react\";\nimport { TextInputProps } from \"../types/TextInput.types\";\n\nfunction TextInput(props: TextInputProps): JSX.Element {\n    const [touched, setTouch] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [htmlClass, setHtmlClass] = useState(\"\");\n    const [, setValue] = useState(\"\");\n\n\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.value];\n\n        [error, validClass] = (!elementValue && props.required) ?\n            [\"Value cannot be empty\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n        if (!error) {\n            [error, validClass] = (props.maxLength && elementValue && elementValue.length > (props.maxLength)) ?\n            [`Value can't have more than ${props.maxLength} characters`, \"is-invalid\"] : [\"\", \"is-valid\"];\n        }\n\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\n\n        setTouch(true);\n        setError(error);\n        setHtmlClass(validClass);\n        setValue(elementValue);\n    }\n\n    return (\n        <div>\n            <label htmlFor={props.id.toString()}>{props.label}</label>\n            <input\n                value={props.value}\n                type={props.type}\n                onChange={onValueChanged}\n                className={`form-control ${props.inputClass} ${htmlClass}`}\n                id={`id_${props.label}`}\n                placeholder={props.placeholder} />\n            {error ?\n                <div className=\"invalid-feedback\">\n                    {error}\n                </div> : null\n            }\n        </div>\n    );\n}\n\nexport default TextInput;","import { fetchDataRequest, fetchDataSuccess, fetchDataError } from \"../../../store/actions/users.action\";\r\nimport { postRefreshToken } from \"../Aut/RefreshToken\";\r\n\r\nexport function putStatusUser(id: any, data: any) {\r\n    var bearer = 'Bearer ' + localStorage.getItem(\"access_token\");\r\n    \r\n    return (dispatch: any) => {\r\n        dispatch(fetchDataRequest());\r\n        fetch(\r\n                `${process.env.REACT_APP_API_URL}/user/status/${id}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        'Authorization': bearer,\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Allow-Origin': `${process.env.REACT_APP_API_LOCAL}`,\r\n                        'Access-Control-Allow-Credentials': 'true'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                }\r\n            )\r\n            .then( response => {\r\n                if (!response.ok) {\r\n                    if (response.status === 403) {\r\n                        dispatch(postRefreshToken())\r\n                        dispatch(putStatusUser(id,data))\r\n                    }\r\n                    else {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                }\r\n                else {\r\n                    return response\r\n                }\r\n            })\r\n            .then (val => {\r\n                console.log(val)\r\n                console.log(id)\r\n                dispatch(fetchDataSuccess(data))\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchDataError(error));\r\n                console.log(\"error\")\r\n            });\r\n    };\r\n}","import React, { useState, FormEvent, Dispatch } from \"react\";\r\nimport { OnChangeModel } from \"../../common/types/Form.types\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport TextInput from \"../../common/components/TextInput\";\r\nimport '../../assets/css/Login.css'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { postResetPassword } from \"../../common/service/ResetPassword/PostResetPassword\";\r\n\r\nconst ForgotPassword: React.FC = () => {\r\n  const dispatch: Dispatch<any> = useDispatch();\r\n  const history = useHistory()\r\n\r\n  const [formState, setFormState] = useState({\r\n    username: { error: \"\", value: \"\" },\r\n    password: { error: \"\", value: \"\" }\r\n  });\r\n\r\n\r\n  function hasFormValueChanged(model: OnChangeModel): void {\r\n    setFormState({ ...formState, [model.field]: { error: model.error, value: model.value } });\r\n  }\r\n\r\n  function submit(e: FormEvent<HTMLFormElement>): void {\r\n    e.preventDefault();\r\n    if(isFormInvalid()) { return; }\r\n    const idx = toast.loading(\"Đang xử lý. Vui lòng đợi giây lát...\", {\r\n      position: toast.POSITION.TOP_CENTER\r\n    });\r\n    dispatch(postResetPassword(formState.username.value, idx))\r\n  }\r\n\r\n  function isFormInvalid() {\r\n    return (formState.username.error \r\n      || !formState.username.value );\r\n  }\r\n\r\n  function getDisabledClass(): string {\r\n    let isError: boolean = isFormInvalid() as boolean;\r\n    return isError ? \"disabled\" : \"\";\r\n  }\r\n\r\n  const changeRoute = () => {\r\n    history.push('/landing-page')\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"container-fluid \" id=\"login-page\">\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-xl-10 col-lg-10 col-md-9\">\r\n          <h2 id=\"text-logo\" onClick={changeRoute}>KidsDrawing</h2>\r\n        </div>\r\n      </div>\r\n      <ToastContainer />\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-xl-10 col-lg-12 col-md-9\">\r\n          <div className=\"card o-hidden border-0  my-5\">\r\n            <div className=\"card-body p-0\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-6 d-none d-lg-block text-center\" id=\"image-login-page\">\r\n                  <img src=\"https://res.cloudinary.com/djtmwajiu/image/upload/v1667290306/o0ymcs4lblpy2hfmisyq.png\" alt=\"First slide\" />\r\n                </div>\r\n                <div className=\"col-lg-6 shadow-lg\">\r\n                  <div className=\"p-5\">\r\n                    <div className=\"text-center\">\r\n                      <h1 className=\"h4 text-gray-900 mb-4\">Quên mật khẩu</h1>\r\n                    </div>\r\n                    <form className=\"user\" onSubmit={submit}>\r\n                      <div className=\"form-group\">\r\n\r\n                        <TextInput id=\"input_username\"\r\n                          field=\"username\"\r\n                          value={formState.username.value}\r\n                          onChange={hasFormValueChanged}\r\n                          required={true}\r\n                          maxLength={100}\r\n                          label=\"Email\"\r\n                          placeholder=\"\" />\r\n                      </div>\r\n                      <button\r\n                        className={`btn btn-primary btn-user btn-block ${getDisabledClass()}`}\r\n                        type=\"submit\">\r\n                        Gửi\r\n                      </button>\r\n                    </form>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import { toast } from \"react-toastify\";\r\nimport { fetchDataRequest, fetchDataError } from \"../../../store/actions/schedule.action\";\r\nimport { postRefreshToken } from \"../Aut/RefreshToken\";\r\n\r\nexport function postResetPassword(email: string, idx: any) {\r\n    var bearer = 'Bearer ' + localStorage.getItem(\"access_token\");\r\n    return (dispatch: any) => {\r\n        dispatch(fetchDataRequest());\r\n        fetch(\r\n                `${process.env.REACT_APP_API_URL}/password-reset-token/user/resetPassword/${email}`, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        'Authorization': bearer,\r\n                        'Content-Type': 'application/json',\r\n                        'Access-Control-Allow-Origin': `${process.env.REACT_APP_API_LOCAL}`,\r\n                        'Access-Control-Allow-Credentials': 'true'\r\n                    }\r\n                }\r\n            )\r\n            .then( response => {\r\n                if (!response.ok) {\r\n                    if (response.status === 403) {\r\n                        dispatch(postRefreshToken())\r\n                        dispatch(postResetPassword(email, idx))\r\n                    }\r\n                    else {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                }\r\n                else {\r\n                    return response.json()\r\n                }\r\n            })\r\n            .then (data => {\r\n                console.log(data)\r\n                localStorage.removeItem('token_reset_password') // Authorization\r\n                localStorage.setItem('token_reset_password', data.token)\r\n                toast.update(idx, { render: \"Vui lòng đợi email!\", type: \"success\", isLoading: false, position: toast.POSITION.TOP_CENTER, autoClose: 1000 });\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchDataError(error));\r\n                toast.update(idx, { render: \"Gửi yêu cầu không thành công!\", type: \"error\", isLoading: false, position: toast.POSITION.TOP_CENTER, closeButton: true });\r\n                console.log(\"error\")\r\n            });\r\n    };\r\n}"],"sourceRoot":""}